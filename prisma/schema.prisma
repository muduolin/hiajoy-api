generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id           String        @id @default(uuid())
  email        String?       @unique
  password     String?
  avatar       String?
  provider     String?
  username     String?       @unique
  createdAt    DateTime      @default(now())
  expiredAt    DateTime?
  lastActiveAt DateTime      @default(now())
  isAdmin      Boolean       @default(false)
  profile      user_profile?
}

model user_profile {
  id                        String          @id
  points                    Int          @default(0)
  stripeCustomerId          String?      @unique
  stripeSubscriptionId      String?
  stripeProductId           String?
  stripeSubscriptionRenewal DateTime?
  datePaid                  DateTime?
  user                      user         @relation(fields: [id], references: [id], onDelete: Cascade)
  task                      task[]
  journal                   journal[]
  favorite_tracks           user_track[]
}

model user_track {
  user      user_profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  track     track        @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId   Int
  createdAt    DateTime  @default(now())
  @@id([userId, trackId])
}

model email {
  id            Int       @id @default(autoincrement())
  email         String?   @unique
  code          String?
  codeExpiredAt DateTime?
  sendEmail     Boolean   @default(false)
  sendEmailAt   DateTime?
  createdAt     DateTime  @default(now())
}

model journal {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  content     String?
  image       String?
  time        String       @default("1")
  isShared    Boolean      @default(false)
  userId   String
  mood        Int?
  createdAt   DateTime     @default(now())
  user        user_profile @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model task {
  id          String       @id
  description String
  time        String       @default("1")
  isDone      Boolean      @default(false)
  userId      String
  createdAt   DateTime     @default(now())
  user        user_profile @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum track_type {
  MEDITATION
  COURSE
  AFFIRMATION
}

model track {
  id             Int          @id
  is_premium     Boolean      @default(true)
  title          String?
  author         String?
  pubDate        DateTime     @default(now())
  image_url      String
  audio_url      String
  audio_type     String
  audio_length   Int
  tags           String[]
  subtitle       String
  description    String?
  play_count     Int?
  favorite_count Int?
  set            String?
  type           track_type?
  favorite_users user_track[]
}
